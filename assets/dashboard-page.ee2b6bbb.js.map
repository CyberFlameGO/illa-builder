{"version":3,"file":"dashboard-page.ee2b6bbb.js","sources":["../../src/page/Dashboard/DashboardApps/style.tsx","../../src/redux/dashboard/apps/dashboardAppSelector.ts","../../src/page/Dashboard/components/DashboardItemMenu/style.tsx","../../src/page/Dashboard/components/DashboardItemMenu/index.tsx","../../src/page/Dashboard/DashboardApps/index.tsx","../../src/redux/dashboard/resources/dashboardResourceSelector.ts","../../src/page/Dashboard/components/DashboardItemMenu/resourcesItemMenu.tsx","../../src/page/Dashboard/DashboardResources/style.tsx","../../src/page/Dashboard/DashboardResources/index.tsx","../../src/page/Dashboard/style.tsx","../../src/page/Dashboard/components/DashboardTitleBar/style.tsx","../../src/page/Dashboard/components/DashboardTitleBar/index.tsx","../../src/page/Dashboard/index.tsx"],"sourcesContent":["import { SerializedStyles } from \"@emotion/serialize\"\nimport { css } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\n\nexport const appsContainerStyle: SerializedStyles = css`\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  margin: 0 auto;\n  width: 67%;\n  height: 100%;\n`\n\nexport const listTitleContainerStyle: SerializedStyles = css`\n  display: flex;\n  height: 80px;\n  align-items: center;\n  flex-direction: row;\n`\n\nexport const listTitleStyle: SerializedStyles = css`\n  font-size: 20px;\n  font-weight: 500;\n  flex-grow: 1;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n`\n\nexport const itemExtraContainerStyle: SerializedStyles = css`\n  display: flex;\n  height: 100%;\n  align-items: center;\n  flex-direction: row;\n`\n\nexport const menuButtonStyle: SerializedStyles = css`\n  margin-left: 4px;\n`\n\nexport const itemMenuButtonStyle: SerializedStyles = css`\n  margin-left: 4px;\n`\n\nexport const loadingBoxStyle = css`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 120px;\n`\n\nexport const hoverableStyle = css`\n  cursor: pointer;\n`\n","import { RootState } from \"@/store\"\n\nexport const getDashboardApps = (state: RootState) => {\n  return state.dashboard.dashboardApps.list\n}\n","import { SerializedStyles } from \"@emotion/serialize\"\nimport { css } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\n\nexport const triggerContentContainerCss: SerializedStyles = css`\n  padding-top: 8px;\n  padding-bottom: 8px;\n  display: flex;\n  flex-direction: column;\n`\n\nexport function applyTriggerContentItemStyle(color: string): SerializedStyles {\n  return css`\n    cursor: pointer;\n    padding: 5px 16px;\n    color: ${color};\n    min-width: 184px;\n    font-size: 14px;\n\n    &:hover {\n      background: ${globalColor(`--${illaPrefix}-techPurple-07`)};\n    }\n  `\n}\n","import { FC, useEffect, useState } from \"react\"\nimport { DashboardItemMenuProps } from \"@/page/Dashboard/components/DashboardItemMenu/interface\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\nimport { Modal } from \"@illa-design/modal\"\nimport { Input } from \"@illa-design/input\"\nimport { Message } from \"@illa-design/message\"\nimport {\n  triggerContentContainerCss,\n  applyTriggerContentItemStyle,\n} from \"./style\"\nimport { useTranslation } from \"react-i18next\"\nimport { Api } from \"@/api/base\"\nimport { useDispatch } from \"react-redux\"\nimport { dashboardAppActions } from \"@/redux/dashboard/apps/dashboardAppSlice\"\n\nexport const DashboardItemMenu: FC<DashboardItemMenuProps> = (props) => {\n  const { appId, appName } = props\n\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n\n  const [confirmLoading, setConfirmLoading] = useState(false)\n\n  let confirmVal = \"\"\n\n  return (\n    <div css={triggerContentContainerCss}>\n      <div\n        css={applyTriggerContentItemStyle(\n          globalColor(`--${illaPrefix}-techPurple-01`),\n        )}\n        onClick={() => {\n          Modal.confirm({\n            content: (\n              <Input\n                onChange={(res) => {\n                  confirmVal = res\n                }}\n              />\n            ),\n            title: t(\"rename\"),\n            confirmLoading: confirmLoading,\n            onOk: () => {\n              setConfirmLoading(true)\n              return new Promise((resolve) => {\n                Api.request(\n                  {\n                    url: `/api/v1/apps/${appId}`,\n                    method: \"PUT\",\n                    data: {\n                      appName: confirmVal,\n                    },\n                  },\n                  (response) => {\n                    dispatch(\n                      dashboardAppActions.renameDashboardAppReducer({\n                        appId: appId,\n                        newName: confirmVal,\n                      }),\n                    )\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                  (failure) => {\n                    Message.error(t(\"dashboard.app.rename_fail\"))\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                  (crash) => {\n                    Message.error(t(\"network_error\"))\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                )\n              })\n            },\n          })\n        }}\n      >\n        {t(\"rename\")}\n      </div>\n      <div\n        css={applyTriggerContentItemStyle(\n          globalColor(`--${illaPrefix}-grayBlue-02`),\n        )}\n        onClick={() => {\n          Modal.confirm({\n            content: (\n              <Input\n                onChange={(res) => {\n                  confirmVal = res\n                }}\n                placeholder={`${t(\"dashboard.app.duplicate_placeholder\")}`}\n              />\n            ),\n            title: `${t(\"duplicate\")} '${appName}'`,\n            confirmLoading: confirmLoading,\n            onOk: () => {\n              setConfirmLoading(true)\n              return new Promise((resolve) => {\n                Api.request(\n                  {\n                    url: `/api/v1/apps/${appId}/duplicate`,\n                    method: \"POST\",\n                  },\n                  (response) => {\n                    dispatch(\n                      dashboardAppActions.addDashboardAppReducer({\n                        app: response.data,\n                      }),\n                    )\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                  (failure) => {\n                    Message.error(t(\"dashboard.app.duplicate_fail\"))\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                  (crash) => {\n                    Message.error(t(\"network_error\"))\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                )\n              })\n            },\n          })\n        }}\n      >\n        {t(\"duplicate\")}\n      </div>\n      <div\n        css={applyTriggerContentItemStyle(\n          globalColor(`--${illaPrefix}-red-03`),\n        )}\n        onClick={() => {\n          Api.request(\n            {\n              url: `/api/v1/apps/${appId}`,\n              method: \"DELETE\",\n            },\n            (response) => {\n              dispatch(\n                dashboardAppActions.removeDashboardAppReducer(\n                  response.data.appId,\n                ),\n              )\n\n              Message.success(t(\"dashboard.app.trash_success\"))\n            },\n            (failure) => {\n              Message.success(t(\"dashboard.app.trash_failure\"))\n            },\n            (crash) => {\n              Message.error(t(\"network_error\"))\n            },\n          )\n        }}\n      >\n        {t(\"move_to_trash\")}\n      </div>\n    </div>\n  )\n}\n\nDashboardItemMenu.displayName = \"DashboardItemMenu\"\n","import { FC, useState } from \"react\"\nimport {\n  appsContainerStyle,\n  itemExtraContainerStyle,\n  itemMenuButtonStyle,\n  listTitleContainerStyle,\n  listTitleStyle,\n  menuButtonStyle,\n  hoverableStyle,\n} from \"./style\"\nimport { useTranslation } from \"react-i18next\"\nimport { Button } from \"@illa-design/button\"\nimport { List, ListItem, ListItemMeta } from \"@illa-design/list\"\nimport { MoreIcon } from \"@illa-design/icon\"\nimport { Divider } from \"@illa-design/divider\"\nimport { DashboardApp } from \"@/redux/dashboard/apps/dashboardAppState\"\nimport { Empty } from \"@illa-design/empty\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getDashboardApps } from \"@/redux/dashboard/apps/dashboardAppSelector\"\nimport { dashboardAppActions } from \"@/redux/dashboard/apps/dashboardAppSlice\"\nimport { useNavigate } from \"react-router-dom\"\nimport { Api } from \"@/api/base\"\nimport { Tooltip } from \"@illa-design/tooltip\"\nimport { DashboardItemMenu } from \"@/page/Dashboard/components/DashboardItemMenu\"\nimport { Message } from \"@illa-design/message\"\n\nexport const DashboardApps: FC = () => {\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n  let navigate = useNavigate()\n\n  const appsList: DashboardApp[] = useSelector(getDashboardApps)\n\n  const [createLoading, setCreateNewLoading] = useState(false)\n\n  return (\n    <div css={appsContainerStyle}>\n      <div css={listTitleContainerStyle}>\n        <span css={listTitleStyle}>{t(\"all_apps\")}</span>\n        <Button\n          colorScheme=\"gray\"\n          onClick={() => {\n            Message.success({ content: t(\"link_copied\") })\n          }}\n        >\n          {t(\"share\")}\n        </Button>\n        <Button\n          _css={menuButtonStyle}\n          loading={createLoading}\n          colorScheme=\"techPurple\"\n          onClick={() => {\n            Api.request<DashboardApp>(\n              {\n                url: \"/dashboard/apps\",\n                method: \"POST\",\n              },\n              (response) => {\n                dispatch(\n                  dashboardAppActions.addDashboardAppReducer({\n                    app: response.data,\n                  }),\n                )\n                navigate(`/app/${response.data.appId}`)\n              },\n              (response) => {},\n              (error) => {},\n              (loading) => {\n                setCreateNewLoading(loading)\n              },\n              (errorState) => {\n                if (errorState) {\n                  Message.error({ content: t(\"create_fail\") })\n                }\n              },\n            )\n          }}\n        >\n          {t(\"create_new_app\")}\n        </Button>\n      </div>\n      <Divider direction=\"horizontal\" />\n      {appsList.length !== 0 && (\n        <List\n          size=\"medium\"\n          data={appsList}\n          bordered={false}\n          hoverable={true}\n          render={(item) => {\n            return (\n              <ListItem\n                extra={\n                  <div css={itemExtraContainerStyle}>\n                    <Button\n                      colorScheme=\"techPurple\"\n                      onClick={() => {\n                        navigate(`/app/${item.appId}`)\n                      }}\n                    >\n                      {t(\"edit\")}\n                    </Button>\n                    <Tooltip\n                      trigger=\"click\"\n                      colorScheme=\"white\"\n                      showArrow={false}\n                      position=\"br\"\n                      withoutPadding\n                      clickOutsideToClose\n                      closeOnInnerClick\n                      content={\n                        <DashboardItemMenu\n                          appId={item.appId}\n                          appName={item.appName}\n                        />\n                      }\n                    >\n                      <Button\n                        _css={itemMenuButtonStyle}\n                        colorScheme=\"grayBlue\"\n                        leftIcon={<MoreIcon />}\n                      />\n                    </Tooltip>\n                  </div>\n                }\n              >\n                <ListItemMeta\n                  css={hoverableStyle}\n                  title={item.appName}\n                  description={item.appActivity}\n                  onClick={() => {\n                    navigate(`/app/${item.appId}`)\n                  }}\n                />\n              </ListItem>\n            )\n          }}\n          renderKey={(item) => {\n            return item.appId\n          }}\n        />\n      )}\n      {appsList.length == 0 && <Empty paddingVertical=\"120px\" />}\n    </div>\n  )\n}\n\nDashboardApps.displayName = \"DashboardApps\"\n","import { RootState } from \"@/store\"\n\nexport const getDashboardResources = (state: RootState) => {\n  return state.dashboard.dashboardResources.list\n}\n","import { FC, useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\nimport { Modal } from \"@illa-design/modal\"\nimport { Message } from \"@illa-design/message\"\nimport {\n  triggerContentContainerCss,\n  applyTriggerContentItemStyle,\n} from \"./style\"\nimport { useTranslation } from \"react-i18next\"\nimport { Api } from \"@/api/base\"\nimport { dashboardResourceActions } from \"@/redux/dashboard/resources/dashboardResourceSlice\"\nimport { DashboardResourcesItemMenuProps } from \"./interface\"\n\nexport const DashboardResourcesItemMenu: FC<DashboardResourcesItemMenuProps> = (\n  props,\n) => {\n  const { appId } = props\n\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n\n  const [confirmLoading, setConfirmLoading] = useState(false)\n\n  return (\n    <div css={triggerContentContainerCss}>\n      <div\n        css={applyTriggerContentItemStyle(\n          globalColor(`--${illaPrefix}-techPurple-01`),\n        )}\n        onClick={() => {}}\n      >\n        {t(\"edit\")}\n      </div>\n      <div\n        css={applyTriggerContentItemStyle(\n          globalColor(`--${illaPrefix}-red-03`),\n        )}\n        onClick={() => {\n          Modal.confirm({\n            confirmLoading: confirmLoading,\n            title: t(\"dashboard.resources.trash_confirm_title\"),\n            content: (\n              <div>{t(\"dashboard.resources.trash_confirm_content\")}</div>\n            ),\n            onOk: () => {\n              setConfirmLoading(true)\n              return new Promise((resolve) => {\n                Api.request(\n                  {\n                    url: `/api/v1/resources/${appId}`,\n                    method: \"DELETE\",\n                  },\n                  (response) => {\n                    dispatch(\n                      dashboardResourceActions.removeResourceReducer(\n                        response.data.resourceId,\n                      ),\n                    )\n                    Message.success(t(\"dashboard.resources.trash_success\"))\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                  (failure) => {\n                    Message.error(t(\"dashboard.resources.trash_failure\"))\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                  (crash) => {\n                    Message.error(t(\"network_error\"))\n\n                    setConfirmLoading(false)\n                    resolve(\"finish\")\n                  },\n                )\n              })\n            },\n          })\n        }}\n      >\n        {t(\"move_to_trash\")}\n      </div>\n    </div>\n  )\n}\n\nDashboardResourcesItemMenu.displayName = \"DashboardResourcesItemMenu\"\n","import { SerializedStyles } from \"@emotion/serialize\"\nimport { css } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\n\nexport const resourceContainerStyle: SerializedStyles = css`\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  margin: 0 auto;\n  width: 67%;\n  height: 100%;\n`\n\nexport const nameIconStyle = css`\n  font-size: 24px;\n  margin-right: 8px;\n`\nexport const tableMainTextStyle = css`\n  font-weight: 500;\n`\nexport const tableNormalTextStyle = css`\n  font-size: 14px;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n`\nexport const tableInfoTextStyle = css`\n  font-size: 14px;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-04`)};\n`\n","import { FC, ReactNode, useMemo } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { css } from \"@emotion/react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Button } from \"@illa-design/button\"\nimport { Divider } from \"@illa-design/divider\"\nimport { Tooltip } from \"@illa-design/tooltip\"\nimport { Empty } from \"@illa-design/empty\"\nimport { Table } from \"@illa-design/table\"\nimport { RestApiIcon, MoreIcon, PostgresIcon } from \"@illa-design/icon\"\nimport { DashboardResource } from \"@/redux/dashboard/resources/dashboardResourceState\"\nimport { getDashboardResources } from \"@/redux/dashboard/resources/dashboardResourceSelector\"\nimport {\n  appsContainerStyle,\n  listTitleContainerStyle,\n  listTitleStyle,\n  itemMenuButtonStyle,\n} from \"@/page/Dashboard/DashboardApps/style\"\nimport { DashboardResourcesItemMenu } from \"@/page/Dashboard/components/DashboardItemMenu/resourcesItemMenu\"\nimport {\n  nameIconStyle,\n  tableNormalTextStyle,\n  tableMainTextStyle,\n  tableInfoTextStyle,\n} from \"./style\"\n\nfunction NameColComponent(type: string, text: string) {\n  let icon: ReactNode = null\n  if (type) {\n    icon = <RestApiIcon css={nameIconStyle} />\n  }\n  return (\n    <>\n      {icon}\n      <span css={css(tableNormalTextStyle, tableMainTextStyle)}>{text}</span>\n    </>\n  )\n}\nfunction TypeColComponent(text: string) {\n  return <span css={tableInfoTextStyle}>{text}</span>\n}\nfunction DbNameColComponent(text: string) {\n  if (text) {\n    return <span css={tableNormalTextStyle}>{text}</span>\n  } else {\n    return <span css={tableInfoTextStyle}>Null</span>\n  }\n}\nfunction CtimeColComponent(text: string) {\n  return <span css={tableInfoTextStyle}>{text}</span>\n}\nconst ExtraColComponent: FC<{ resourceId: string }> = (props) => {\n  const { t } = useTranslation()\n  const { resourceId } = props\n  return (\n    <>\n      <Button colorScheme=\"techPurple\">{t(\"edit\")}</Button>\n      <Tooltip\n        trigger=\"click\"\n        colorScheme=\"white\"\n        showArrow={false}\n        position=\"br\"\n        withoutPadding\n        clickOutsideToClose\n        closeOnInnerClick\n        content={<DashboardResourcesItemMenu appId={resourceId} />}\n      >\n        <Button\n          _css={itemMenuButtonStyle}\n          colorScheme=\"grayBlue\"\n          leftIcon={<MoreIcon />}\n        />\n      </Tooltip>\n    </>\n  )\n}\n\nexport const DashboardResources: FC = () => {\n  const { t } = useTranslation()\n\n  const resourcesList: DashboardResource[] = useSelector(getDashboardResources)\n  const columns = useMemo(\n    () => [\n      {\n        Header: t(\"dashboard.resources.table_name\"),\n        accessor: \"nameCol\",\n        width: 500,\n      },\n      {\n        Header: t(\"dashboard.resources.table_type\"),\n        accessor: \"typeCol\",\n      },\n      {\n        Header: t(\"dashboard.resources.table_dbname\"),\n        accessor: \"dbNameCol\",\n      },\n      {\n        Header: t(\"dashboard.resources.table_ctime\"),\n        accessor: \"ctimeCol\",\n      },\n      {\n        Header: \"\",\n        accessor: \"extraCol\",\n        disableSortBy: true,\n        width: 20,\n      },\n    ],\n    [],\n  )\n  const data = useMemo(() => {\n    const result: any[] = []\n    resourcesList.forEach((item: DashboardResource, idx: number) => {\n      result.push({\n        nameCol: NameColComponent(item.resourceType, item.resourceName),\n        typeCol: TypeColComponent(item.resourceType),\n        dbNameCol: DbNameColComponent(item.databaseName),\n        ctimeCol: CtimeColComponent(item.createdAt),\n        extraCol: <ExtraColComponent resourceId={item.resourceId} />,\n      })\n    })\n    return result\n  }, [resourcesList])\n\n  return (\n    <div css={appsContainerStyle}>\n      <div css={listTitleContainerStyle}>\n        <span css={listTitleStyle}>{t(\"resources\")}</span>\n        <Button colorScheme=\"techPurple\">{t(\"create_new\")}</Button>\n      </div>\n      <Divider direction=\"horizontal\" />\n      {resourcesList?.length ? (\n        <Table data={data} columns={columns} disableRowSelect />\n      ) : null}\n      {!resourcesList?.length ? <Empty paddingVertical=\"120px\" /> : null}\n    </div>\n  )\n}\n\nDashboardResources.displayName = \"DashboardResources\"\n","import { css, SerializedStyles } from \"@emotion/react\"\n\nexport const containerStyle: SerializedStyles = css`\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n`\n","import { css, SerializedStyles } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\n\nexport const containerStyle: SerializedStyles = css`\n  box-sizing: border-box;\n  width: 100%;\n`\n\nexport const navBarLogoContainerStyle: SerializedStyles = css`\n  padding-left: 16px;\n  padding-right: 24px;\n  display: inline-flex;\n  align-items: center;\n  align-self: center;\n  flex-direction: row;\n  width: 74px;\n`\n\nexport const navBarAvatarContainerStyle: SerializedStyles = css`\n  padding-left: 16px;\n  padding-right: 16px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: end;\n  flex-grow: 1;\n  align-self: center;\n  flex-direction: row;\n  cursor: pointer;\n`\n\nexport const expandStyle: SerializedStyles = css`\n  margin-left: 8px;\n`\n\nexport const settingBodyStyle = css`\n  width: 200px;\n  height: 120px;\n  border-radius: 8px;\n  box-shadow: 0 2px 16px 0 ${globalColor(`--${illaPrefix}-blackAlpha-05`)};\n  border: 1px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n`\n\nexport const coverTriggerStyle = css`\n  position: relative;\n  top: 10px;\n  & > div {\n    padding: 0;\n    box-shadow: none;\n  }\n`\n\nexport const settingUserStyle = css`\n  padding: 0 8px;\n`\n\nexport const userAvatarStyle = css`\n  margin: 8px;\n`\n\nexport const usernameStyle = css`\n  font-size: 12px;\n  font-weight: 500;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n`\n\nexport const settingListStyle = css`\n  padding: 4px 0;\n`\n\nexport const settingItemStyle = css`\n  padding: 5px 16px;\n  font-size: 14px;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n  cursor: pointer;\n`\n","import { FC } from \"react\"\nimport {\n  containerStyle,\n  expandStyle,\n  navBarAvatarContainerStyle,\n  navBarLogoContainerStyle,\n  settingBodyStyle,\n  coverTriggerStyle,\n  settingUserStyle,\n  userAvatarStyle,\n  usernameStyle,\n  settingItemStyle,\n  settingListStyle,\n} from \"./style\"\nimport { TabPane, Tabs } from \"@illa-design/tabs\"\nimport { useTranslation } from \"react-i18next\"\nimport { ReactComponent as Logo } from \"@assets/illa-logo.svg\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { Avatar } from \"@illa-design/avatar\"\nimport { DownIcon } from \"@illa-design/icon\"\nimport { globalColor, illaPrefix } from \"@illa-design/theme\"\nimport { Trigger } from \"@illa-design/trigger\"\nimport { Divider } from \"@illa-design/divider\"\n\nconst SettingTrigger: FC = () => {\n  const { t } = useTranslation()\n  let navigate = useNavigate()\n  return (\n    <div css={settingBodyStyle}>\n      <div css={settingUserStyle}>\n        <Avatar size=\"small\" css={userAvatarStyle} />\n        <span css={usernameStyle}>OnlyBoA</span>\n      </div>\n      <Divider />\n      <div css={settingListStyle}>\n        <div\n          css={settingItemStyle}\n          onClick={() => {\n            navigate(\"/setting\")\n          }}\n        >\n          {t(\"Setting\")}\n        </div>\n        <div css={settingItemStyle}>{t(\"Logout\")}</div>\n      </div>\n    </div>\n  )\n}\n\nexport const DashboardTitleBar: FC = () => {\n  const { t } = useTranslation()\n  let navigate = useNavigate()\n  let location = useLocation()\n  let pathList = location.pathname.split(\"/\")\n  const tabs: {\n    key: string\n    title: string\n  }[] = [\n    {\n      key: \"apps\",\n      title: t(\"apps\"),\n    },\n    {\n      key: \"resources\",\n      title: t(\"resources\"),\n    },\n  ]\n  return (\n    <Tabs\n      prefix={\n        <div css={navBarLogoContainerStyle} key=\"prefix\">\n          <Logo\n            onClick={() => {\n              navigate(\"/\")\n            }}\n          />\n        </div>\n      }\n      suffix={\n        <div css={navBarAvatarContainerStyle} key=\"suffix\">\n          <Trigger\n            trigger=\"hover\"\n            position=\"br\"\n            showArrow={false}\n            colorScheme=\"white\"\n            clickOutsideToClose\n            content={<SettingTrigger />}\n            _css={coverTriggerStyle}\n          >\n            <div>\n              <Avatar size=\"small\" />\n              <DownIcon\n                css={expandStyle}\n                color={globalColor(`--${illaPrefix}-grayBlue-05`)}\n              />\n            </div>\n          </Trigger>\n        </div>\n      }\n      activeKey={pathList[pathList.length - 1]}\n      css={containerStyle}\n      withoutContent\n      colorScheme=\"grayBlue\"\n      size=\"large\"\n      onChange={(key) => {\n        switch (key) {\n          case \"apps\":\n            navigate(\"./apps\")\n            break\n          case \"resources\":\n            navigate(\"./resources\")\n            break\n        }\n      }}\n    >\n      {tabs.map((item) => {\n        return <TabPane title={item.title} key={item.key} />\n      })}\n    </Tabs>\n  )\n}\n\nDashboardTitleBar.displayName = \"DashboardTitleBar\"\n","import { FC, useEffect, useState } from \"react\"\nimport { Outlet } from \"react-router-dom\"\nimport { containerStyle } from \"./style\"\nimport { DashboardTitleBar } from \"@/page/Dashboard/components/DashboardTitleBar\"\nimport { Connection, Room } from \"@/api/ws/ws\"\nimport { Api } from \"@/api/base\"\nimport { DashboardApp } from \"@/redux/dashboard/apps/dashboardAppState\"\nimport { dashboardAppActions } from \"@/redux/dashboard/apps/dashboardAppSlice\"\nimport { useDispatch } from \"react-redux\"\nimport { DashboardResource } from \"@/redux/dashboard/resources/dashboardResourceState\"\nimport { dashboardResourceActions } from \"@/redux/dashboard/resources/dashboardResourceSlice\"\n\nexport const IllaApp: FC = () => {\n  const [room, setRoom] = useState<Room>()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    Api.request<DashboardApp[]>(\n      {\n        url: \"/api/v1/apps\",\n        method: \"GET\",\n      },\n      (response) => {\n        dispatch(\n          dashboardAppActions.updateDashboardAppListReducer(response.data),\n        )\n      },\n      (response) => {},\n      (error) => {},\n    )\n    Api.request<DashboardResource[]>(\n      {\n        url: \"/api/v1/resources\",\n        method: \"GET\",\n      },\n      (response) => {\n        dispatch(\n          dashboardResourceActions.updateResourceListReducer(response.data),\n        )\n      },\n      (response) => {},\n      (error) => {},\n    )\n    Connection.enterRoom(\n      \"dashboard\",\n      (loading) => {},\n      (errorState) => {},\n      (room) => {\n        setRoom(room)\n      },\n    )\n    return () => {\n      if (room !== undefined) {\n        Connection.leaveRoom(room.roomId)\n      }\n    }\n  }, [])\n  return (\n    <div css={containerStyle}>\n      <DashboardTitleBar />\n      <Outlet />\n    </div>\n  )\n}\n\nIllaApp.displayName = \"IllaApp\"\n"],"names":["appsContainerStyle","_EMOTION_STRINGIFIED_CSS_ERROR__","listTitleContainerStyle","listTitleStyle","globalColor","illaPrefix","itemExtraContainerStyle","menuButtonStyle","itemMenuButtonStyle","hoverableStyle","getDashboardApps","state","dashboard","dashboardApps","list","triggerContentContainerCss","color","css","DashboardItemMenu","props","appId","appName","t","useTranslation","dispatch","useDispatch","confirmLoading","setConfirmLoading","useState","confirmVal","_jsxDEV","applyTriggerContentItemStyle","Modal","confirm","content","res","_jsxFileName","this","title","onOk","Promise","resolve","Api","request","url","method","data","response","dashboardAppActions","renameDashboardAppReducer","newName","failure","error","crash","addDashboardAppReducer","app","removeDashboardAppReducer","success","displayName","DashboardApps","navigate","useNavigate","appsList","useSelector","createLoading","setCreateNewLoading","Message","loading","errorState","length","item","appActivity","getDashboardResources","dashboardResources","DashboardResourcesItemMenu","dashboardResourceActions","removeResourceReducer","resourceId","nameIconStyle","tableMainTextStyle","tableNormalTextStyle","tableInfoTextStyle","type","text","icon","_Fragment","ExtraColComponent","DashboardResources","resourcesList","columns","useMemo","Header","accessor","width","disableSortBy","result","forEach","idx","push","nameCol","NameColComponent","resourceType","resourceName","typeCol","TypeColComponent","dbNameCol","DbNameColComponent","databaseName","ctimeCol","CtimeColComponent","createdAt","extraCol","containerStyle","navBarLogoContainerStyle","navBarAvatarContainerStyle","expandStyle","settingBodyStyle","coverTriggerStyle","settingUserStyle","userAvatarStyle","usernameStyle","settingListStyle","settingItemStyle","SettingTrigger","DashboardTitleBar","pathList","location","useLocation","pathname","split","tabs","key","Logo","map","IllaApp","room","setRoom","useEffect","updateDashboardAppListReducer","updateResourceListReducer","enterRoom","undefined","leaveRoom","roomId"],"mappings":"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"}